model$fitted
max(model$fitted)
which(model$fitted = max(model$fitted))
which(model$fitted == max(model$fitted))
index=which(model$fitted == max(model$fitted))
data_cleaned = data[-index,]
model_cleaned = lm(log(data_cleaned$events+1)~data_cleaned$bmi)
plot(model_cleaned)
par(mfrow=c(2,2))
plot)model_cleaned
plot(model_cleaned)
dim(data)
dim(data_cleaned)
par(mfrow=c(2,2))
plot(model_cleaned)
max(model_cleaned$residual)
max(model_cleaned$fitted)
dim(data)
dim(data_cleaned)
detach(data)
index=which(model$fitted == max(model$fitted))
data_cleaned = data[-index,]
attach(data_cleaned)
model_cleaned = lm(log(events+1)~bmi)
plot(model_cleaned)
which(model_cleaned$fitted = max(model_cleaned$fitted))
which(model_cleaned$fitted == max(model_cleaned$fitted))
model_cleaned$fitted[771]
model_cleaned$fitted[756]
detach(data_cleaned)
data = read.csv("/Volumes/OSX/Downloads/takeHomeData.csv", header=T)
attach(data)
model = lm(log(events+1)~bmi)
par(mfrow=c(2,2))
plot(model)
detach(data)
index=which(model$fitted == max(model$fitted))
index
index = c(757, 3762, 4547, 5142)
data_cleaned = data[-index,]
attach(data_cleaned)
model_cleaned = lm(log(events+1)~bmi)
plot(model_cleaned)
summary(data)
detach(data_cleaned)
attach(data)
model = lm(log(X+1)~bmi)
par(mfrow=c(2,2))
plot(model)
log(X+1)
X
data = read.csv("/Volumes/OSX/Downloads/takeHomeData.csv", header=T)
attach(data)
detach(data)
attach(data)
model = lm(log(events+1)~bmi)
detach(data)
detach(data)
detach(data)
attach(data)
model = lm(log(events+1)~bmi)
par(mfrow=c(2,2))
plot(model)
plot(log(events+1)~bmi)
model
abline(3.168e+00,    8.379e-05  )
abline(3.168e+00,    8.379e-05,col=2  )
plot(log(events+1)~bmi)
abline(3.168e+00,    8.379e-05,col=2  )
bmi
max(bmi)
is.na(bmi)
sum(is.na(BMI))
sum(is.na(bmi))
max(bmi)
mean(bmi)
max(bmi[is.na(bmi)==false])
max(bmi[is.na(bmi)==F])
missingIndex = is.na(bmi)
is.na(events)
sum(is.na(events))
sum(missingINdex)
sum(missingIndex)
highIndex = which(bmi==9999)
highIndex
which(bmi==9999)
max(bmi[-missingIndex])
is.na(bmi[-missingIndex])
sum(is.na(bmi[-missingIndex]))
length(bmi)
length(bmi[-missingINdex])
length(bmi[-missingIndex])
missingINdex
missingIndex
missingIndex = which(is.na(bmi))
max(bmi[-missingIndex])
highIndex = which(bmi==99999)
highIndex
removeIndex = c(missingIndex, highIndex)
removeIndex = sort(removeIndex)
removeIndex
data2 = data[-removeIndex,]
detach(data)
attach(data2)
model2 = lm(log(events+1)~bmi)
par(mfrow=c(2,2))
plot(model2)
plot(log(events+1)~bmi)
model2
abline(0.54328,      0.09291, col=2)
summary(model2)
0.09291
qnorm(0.975)
1.959964*0.00342/sqrt(5444)
0.09291+9.084795e-05
0.09291-9.084795e-05
data[removeIndex]
data[removeINdex,]
data[removeIndex,]
hist(data[-removeIndex,]$events)
par(mfrow=c(1,2))
hist(data[-removeIndex,]$events)
hist(data2$events)
hist(data[removeIndex,]$events)
hist(data2$events)
data[removeIndex,]$events
data[missingIndex,]$events
hist(data[missingIndex,]$events)
hist(data2$events)
data_cleaned = data[-missingIndex,]
findH = function (X){
H = X%*%solve(t(X)%*%X)%*%t(X)
return(diag(H))
}
hat = findH(cbind(1, data_cleaned$bmi))
hat
which(hat>0.15)
data_nooutlier = data_cleaned[-which(hat>0.15),]
data_nooutlier
new_hat = findH(cbind(1, data_nooutlier$bmi))
plot(new_hat)
install(kernlab)
install.packages("kernlab")
install.packages(kernlab)
install.packages("kernlab")
install.packages("kernlab")
args(install.packages)
?install.packages
install.packages("kernlab", repos="http://cran.us.r-project.org")
?kernlab
library(kernlab)
rm(list=ls())
library(kernlab)
data(spam)
spam
summary(spam)
data
spam
summary(spam)
attach(spam)
plot(capitalTotal)
plot(charDollar)
plot(capitalTotal)
plot(charDollar)
type
Y = (type==spam)*1
type = (type=="spam")
type
type = (type=="spam")*1
plot(charDollar, col=type+1)
plot(charDollar[type=1], col=type+1)
plot(charDollar[type==1], col=type+1)
type==1
rm(list=ls())
library(kernlab)
data(spam)
detach(spam)
data(spam)
summary(spam)
attach(spam)
Y = (type=="spam")*1
plot(charDollar[Y==1], col=Y+1)
plot(charDollar, col=Y+1)
make
?lapply
lapply(spam, mean)
lapply(spam, mean, dim=1)
lapply(spam, mean, dim=2)
lapply(spam, 1, mean)
lapply(spam, 2, mean)
apply(spam, 1, mean)
apply(spam, 2, mean)
apply(spam, 2, plot)
spam
dim(spam)
test = matrix(c(1,2,3,4,12,31,23,12,1,31,2,1,32,3,3), ncol=3)
test
apply(test, 2, plot)
par(mfrow=c(2,2))
apply(test, 2, plot)
apply(test, 2, plot(..., col=(testX>2)*1))
testX = c(1,2,3,4,5)
apply(test, 2, plot(..., col=(testX>2)*1))
testX>2
(testX>2)*1)
apply(test, 2, plot(col=(testX>2)*1))
apply(test, 2, plot)
apply(test, 2, plot)
apply(test, 2, plot)
?apply
?plot
apply(test, 2, plot(x,y, col=(testX>2)*1+1))
apply(test, 2, plot(..., col=(testX>2)*1+1))
apply(test, 2, plot)
apply(test, 2, plot(col=1))
apply(test, 2, plot)
apply(test, 2, plot(newX, Index))
apply(test, 2, plot(newX[,I], Index))
apply(test, 2, plot(newX[,1], Index))
apply(test, 2)
apply(test, 2, summary)
test$colnames
test$colname
test$col
colnames(test) = c("one", "two", "three")
par(mfrow=c(2,2))
apply(test, 2, plot)
apply(test, 2, summary)
test[,1]
summary(test[,1])
test
?apply
apply(test, 2, plot, col=2)
apply(test, 2, plot, col=(testX)>2+1)
apply(test, 2, plot, col=(testX)>2+1)
apply(test, 2, plot, col=(testX)>2+2)
apply(test, 2, plot, col=((testX)>3)*1+1)
dim(spam)
apply(spam, 2, plot, col = (Y==1)*1+1)
par(mfrow=c(6, 10))
par(mfrow=c(6, 10))
apply(spam, 2, plot, col = (Y==1)*1+1)
par(mfrow=c(5, 6))
apply(spam[,1:30], 2, plot, col = (Y==1)*1+1)
par(mfrow=c(5, 6))
apply(spam[,1:5], 2, plot, col = (Y==1)*1+1)
spam[,1:5]
dim(spam[,1:5])
plot(spam[,1])
par(mfrow=c(3, 3))
plot(spam[,1])
plot(spam[,1])
plot(spam[,1])
plot(spam[,1])
plot(spam[,1])
plot(spam[,1])
plot(spam[,1])
plot(spam[,1])
?plot
par(mfrow=c(3, 3))
apply(spam[,1:9], 2, plot, col = (Y==1)*1+1)
colnames(spam)
apply(spam[,1:9], 2, plot, col = (Y==1)*1+1, main=colname(spam))
par(mfrow=c(3, 3))
apply(spam[,1:9], 2, plot, col = (Y==1)*1+1, main=colnames(spam))
apply(spam, 2, names)
names(spam[,1])
spam[,2]
colnames(spam)
apply(spam, 2, colnames)
spam[,1]
summary(spam[,1])
?colnames
?apply
colnames(spam)
apply(spam[,1:9], 2, plot, col = (Y==1)*1+1, ylab=colnames(spam)[I])
apply(spam[,1:9], 2, plot, col = (Y==1)*1+1, ylab=colnames(spam)[i])
apply(spam[,1:9], 2, plot, col = (Y==1)*1+1, ylab=colnames(spam)[Index])
par(mfrow=c(3, 3))
par(ask=TRUE)
apply(spam, 2, plot, col = (Y==1)*1+1)
names(spam[1])
names(spam[,1])
names(spam[100])
names(spam)
names(spam)[1]
names(spam)[2]
?sapply
plotfun = function(data, c)
plot(data[ , c], ylab = names(data[c]), col=1)
sapply(seq(1, length(spam), 1), plotfun, spam)
test
sapply(seq(1,length(test),), mean)
seq(1, length(test))
sapply(seq(1,length(test),1), mean)
sapply(seq(1,length(test),1), print)
sapply(seq(1,dim(test)[2],1), print)
dim(test)
seq(1, dim(test)[2], 1)
dim(test)[2]
seq(1,3)
sapply(c(1,2,3), test, mean)
apply(test, c(1,2,3), mean)
sapply(test, c(1,2,3), mean)
var = names(spam)
var
numVar = dim(spam)[2]
numVar
Y = (type=="spam")*1
par(ask=TRUE)
par(mfrow=c(2,2))
par(ask=TRUE)
var = names(spam)
numVar = dim(spam)[2]
for (i in 1:58)
plot(spam[,i], ylab=var[i], col = Y+1)
par(mfrow=c(3,3))
par(ask=TRUE)
var = names(spam)
numVar = dim(spam)[2]
for (i in 1:58)
plot(spam[,i], ylab=var[i], col = Y+1)
par(mfrow=c(3,4))
par(ask=TRUE)
var = names(spam)
numVar = dim(spam)[2]
for (i in 1:58)
plot(spam[,i], ylab=var[i], col = Y+1)
for (i in 1:58)
plot(spam[,i], ylab="perc", main=var[i], col = Y+1)
par(mfrow=c(3,4))
par(ask=TRUE)
var = names(spam)
numVar = dim(spam)[2]
# by column
# apply(spam, 2, plot, col = (Y==1)*1+1)
for (i in 1:58)
plot(spam[,i], ylab="perc", main=var[i], col = Y+1)
par(mfrow=c(3,4))
par(ask=TRUE)
var = names(spam)
numVar = dim(spam)[2]
for (i in 1:58){
plot(spam[,i], ylab="perc", main=var[i], col = Y+1)
}
for (i in 1:58){
plot(spam[,i], col = Y+1)
}
plot(make)
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr", repos='http://cran.us.r-project.org')
library(knitr)
install.packages("knitr", repos='http://cran.us.r-project.org')
install.packages("knitr", repos = "http://cran.us.r-project.org")
remove.packages("knitr")
library("knitr")
install.packages("knitter")
install.packages("knitr", repos = "http://cran.us.r-project.org")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
install.packages("knitr", repos = "http://streaming.stat.iastate.edu/CRAN/src/contrib/knitr_1.4.1.tar.gz")
install.packages("knitr", repos = "http://streaming.stat.iastate.edu/CRAN/src/contrib/knitr_1.4.1.tar.gz")
install.packagess("knitr")
install.packages("knitr")
install.packages("knitr", repo = "/Volumes/OSX/knitr_1.5.tgz")
update.packages(ask = FALSE, repos = 'http://cran.rstudio.org')
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
url="http://scholar.google.com/citations?hl=en&user=HI-I6C0AAAAJ&view_op=list_works&pagesize=100"
library(RCurl)
library(XML)
library(stringr)
rm(list=ls())
library(RCurl)
library(XML)
library(stringr)
url=("http://scholar.google.com/citations?hl=en&user=HI-I6C0AAAAJ&view_op=list_works&pagesize=100")
curl = getCurlHandle()
curlSetOpt(proxy='127.0.0.1:9150',proxytype=5,curl=curl)
html <- getURL(url=url,curl=curl)
doc = toString.XMLNode(htmlTreeParse(html,useInternal=TRUE))
links = str_extract_all(doc, "<a href="/citations"")
links = str_extract_all(doc, "<a href")
links
links = str_extract_all(doc, "<a href=(.*?)citation_for_view")
links
links = str_extract_all(doc, "a href=\"/citations?)
links = str_extract_all(doc, "a href=\"/citations?")
links
links = str_extract_all(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
links[1]
links = str_extract(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
links
links = str_extract_all(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
links = str_extract(links, "a href=\"/citations?(.*?)cit-dark-large-link")
links = str_extract_all(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
links[1]
links = str_extract_all(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
for(i in 1:length(links)){
links[i] = str_extract(links[i], "a href=\"/citations?(.*?)cit-dark-large-link")
}
links[1]
links = str_extract_all(toString(doc), "a href=\"/citations?(.*?)cit-dark-large-link")
links
links = str_extract_all(doc, "a href=(.*?)cit-dark-large-link")
links
links = str_extract_all(doc, "a href=\"/citations?(.*)?cit-dark-large-link")
links
links = str_extract_all(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
length(links)
length(links[[1]])
links = str_extract_all(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
for(i in 1:length(links[[1]])){
links[[1]][i] = str_extract(links[[1]][i], "a href=\"/citations?(.*?)cit-dark-large-link")
}
links
links = str_extract(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
links
links = str_extract(doc, "a href=\"/citations?")
links
links = str_extract_all(doc, "a href=\"/citations?")
citations
links
links = str_extract_all(doc, "a href=\"/citations?(.*?)class="cit-dark-large-link"")
links = str_extract_all(doc, "a href=\"/citations?(.*?)class=\"cit-dark-large-link\"")
links
links[[1]][1]
links[[1]][2]
doc
test=strsplit(doc, "a href=\"/citations?(.*?)cit-dark-large-link\")
test=strsplit(doc, "a href=\"/citations?(.*?)cit-dark-large-link\")
test=strsplit(doc, "a href=\"/citations?(.*?)cit-dark-large-link")
test
test=strsplit(doc, "a href=\"/citations?")
test
links = str_extract_all(doc, "a href=\"/citations(.*?)class=\"cit-dark-large-link\"")
links
links = str_extract_all(doc, "a href=\"/citations")
links
links = str_locate_all(doc, "a href=\"/citations")
links
candidateStart = links$start
candidateStart
candidateStart = links[[1]]$start
candidateStart = links[[1]][1]
candidateStart
candidateStart = links[[1]][1,]
gc()
candidateStart
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
rm(list=ls())
library(swirl)
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
skip()
"win"
"[aA]"
bye()
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
skip()
str_extract("windows", "win")
"[Aa]"
bye()
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
bye()
swilr()
swirl()
skip()
bye()
swirl()
remove.packages("swirl")
install_github("swirldev/swirl")
library(devtools)
install_github("swirldev/swirl")
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
library("stringr")
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
rm(list=ls())
library(swirl)
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
file = source("http://scholar.google.com/citations?view_op=view_citation&hl=en&user=Ff81yEQAAAAJ&citation_for_view=Ff81yEQAAAAJ:u-x6o8ySG0sC")
webUrl = url("http://scholar.google.com/citations?view_op=view_citation&hl=en&user=Ff81yEQAAAAJ&citation_for_view=Ff81yEQAAAAJ:u-x6o8ySG0sC")
file = source(webUrl)
file = toString.XMLNode(htmlTreeParse(url("http://scholar.google.com/citations?view_op=view_citation&hl=en&user=Ff81yEQAAAAJ&citation_for_view=Ff81yEQAAAAJ:u-x6o8ySG0sC"),useInternal=TRUE))
library(XML)
file = toString.XMLNode(htmlTreeParse(url("http://scholar.google.com/citations?view_op=view_citation&hl=en&user=Ff81yEQAAAAJ&citation_for_view=Ff81yEQAAAAJ:u-x6o8ySG0sC"),useInternal=TRUE))
library(RCurl)
curl = getCurlHandle()
curlSetOpt(proxy='127.0.0.1:9150',proxytype=5,curl=curl)
curl = getCurlHandle()
curlSetOpt(proxy='127.0.0.1:9150',proxytype=5,curl=curl)
html = getURL(url="http://scholar.google.com/citations?view_op=view_citation&hl=en&user=Ff81yEQAAAAJ&citation_for_view=Ff81yEQAAAAJ:u-x6o8ySG0sC",curl=curl)
curl = getCurlHandle()
curlSetOpt(proxy='127.0.0.1:9150',proxytype=5,curl=curl)
html = getURL(url="http://scholar.google.com/citations?view_op=view_citation&hl=en&user=Ff81yEQAAAAJ&citation_for_view=Ff81yEQAAAAJ:u-x6o8ySG0sC",curl=curl)
doc = toString.XMLNode(htmlTreeParse(html,useInternal=TRUE))
doc
doc
html
rm(list=ls())
library(swirl)
setwd("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial")
install_course_directory("/Users/JackFu/Documents/01 School Work/02 Graduate/01 3rd Term 2014/140.753/Homework/Final Tutorial/Biostats_753")
swirl()
